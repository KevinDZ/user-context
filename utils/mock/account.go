// Code generated by MockGen. DO NOT EDIT.
// Source: diamond/acl/ports/repositories/account.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"
	entity "user-context/diamond/domain/account/entity"

	gomock "github.com/golang/mock/gomock"
)

// MockAccountRepository is a mock of AccountRepository interface.
type MockAccountRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAccountRepositoryMockRecorder
}

// MockAccountRepositoryMockRecorder is the mock recorder for MockAccountRepository.
type MockAccountRepositoryMockRecorder struct {
	mock *MockAccountRepository
}

// NewMockAccountRepository creates a new mock instance.
func NewMockAccountRepository(ctrl *gomock.Controller) *MockAccountRepository {
	mock := &MockAccountRepository{ctrl: ctrl}
	mock.recorder = &MockAccountRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccountRepository) EXPECT() *MockAccountRepositoryMockRecorder {
	return m.recorder
}

// CheckIsExist mocks base method.
func (m *MockAccountRepository) CheckIsExist(entity entity.Entity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIsExist", entity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIsExist indicates an expected call of CheckIsExist.
func (mr *MockAccountRepositoryMockRecorder) CheckIsExist(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIsExist", reflect.TypeOf((*MockAccountRepository)(nil).CheckIsExist), entity)
}

// Delete mocks base method.
func (m *MockAccountRepository) Delete(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAccountRepositoryMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAccountRepository)(nil).Delete), id)
}

// Insert mocks base method.
func (m *MockAccountRepository) Insert(entity entity.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockAccountRepositoryMockRecorder) Insert(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockAccountRepository)(nil).Insert), entity)
}

// Query mocks base method.
func (m *MockAccountRepository) Query(id string) entity.Entity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", id)
	ret0, _ := ret[0].(entity.Entity)
	return ret0
}

// Query indicates an expected call of Query.
func (mr *MockAccountRepositoryMockRecorder) Query(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockAccountRepository)(nil).Query), id)
}

// Update mocks base method.
func (m *MockAccountRepository) Update(entity entity.Entity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", entity)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockAccountRepositoryMockRecorder) Update(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockAccountRepository)(nil).Update), entity)
}
