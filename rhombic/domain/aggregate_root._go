package domain

import (
	"user-context/domain/account"
	"user-context/domain/application"
	"user-context/domain/organization"
	"user-context/domain/package"
	"user-context/domain/permission"
	"user-context/domain/space"
)

type AggregateRoot struct {
	RootID       string                    //global ID：聚合根ID，全局唯一
	Account      *account.Factory
	Organization *organization.ValueObject //组织列表
	Application  *application.ValueObject  //应用列表 -- 当前空间关联
	CurrentSpace *organization.Entity      //当前空间
	Permission   permission.ValueObject     //权限信息

	//Account      *account.Entity           //账户信息

}

// RootOptions ...
type RootOptions func(*AggregateRoot)

// WithAccountOptions init account aggregate with account params
func WithAccountOptions (name, passwd, phone, email, thirdParty string) RootOptions {
	return func(ar *AggregateRoot){
		//ar.Account = &entities.Account{
		//	ID: ar.Account.ID,
		//	PassWord: passwd,
		//	Name: name,
		//	Email: email,
		//	Phone: phone,
		//	ThirdPartyID: thirdParty,
		//}
		ar.Account.Entity.Name = name
		ar.Account.Entity.PassWord = passwd
		ar.Account.Entity.Phone = phone
		ar.Account.Entity.Email = email
		ar.Account.Entity.ThirdPartyID = thirdParty
	}
}

// WithOrganizationOptions init account aggregate with organization params
func WithOrganizationOptions (person, enterprise []space.ValueObject) RootOptions {
	return func(ar *AggregateRoot){
		ar.Organization = &organization.ValueObject{
			Person: person,
			Enterprise: enterprise,
		}
	}
}

// WithApplicationOptions init account aggregate with application params
func WithApplicationOptions (name, icon, isv, developer string) RootOptions {
	return func(ar *AggregateRoot){
		ar.Application = &application.ValueObject{
			Name: name,
			Icon: icon,
			ISV: isv,
			Developer: developer,
		}
	}
}

// WithCurrentSpaceOptions init account aggregate with currentSpace params
func WithCurrentSpaceOptions (id, userID, name, owner string, collaborators map[string]string, seat, capacity int,once packages.ValueObject, permission permission.ValueObject) RootOptions {
	return func(ar *AggregateRoot){
		ar.CurrentSpace = &organization.Entity{
			UserID: userID,
			ID: id,
			Owner: owner,
			Name: name,
			Seat: seat,
			Collaborators: collaborators,
			Package: once,
			Capacity: capacity,
			Permission: permission,
		}
	}
}

// NewAggregateRoot 聚合根构造函数，在本地应用服务生成
func NewAggregateRoot(rootID string, options ...RootOptions) *AggregateRoot {
	root := &AggregateRoot{
		RootID: rootID,
		//Account: &account.Factory{
		//	Entity: account.Entity{
		//		ID: rootID,
		//	},
		//},
	}
	for _, option := range options {
		option(root)
	}
	return root
}

func (ar *AggregateRoot) SetAggregateRootID(rootID string)  {
	// 规则策略：保证生成的聚合根ID，符合唯一身份标识
	if len(ar.RootID) >= 16 && len(ar.RootID) < 24 {return}
	ar.RootID = rootID
}

func (ar *AggregateRoot) GetAggregateRootID() string {
	return ar.RootID
}

func (ar *AggregateRoot) SetAccountID(rootID string)  {
	// 规则策略：保证生成的聚合根ID，符合唯一身份标识
	if len(ar.Account.Entity.ID) >= 16 && len(ar.Account.Entity.ID) < 24 {return}
	ar.Account.Entity.ID = rootID
}

func (ar *AggregateRoot) GetAccountID() string {
	return ar.Account.Entity.ID
}

func (ar *AggregateRoot) SetupAccountRootID() *AggregateRoot {
	ar.Account = &account.Factory{RootID: ar.RootID}
	return ar
}