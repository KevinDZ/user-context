package domain

import (
	"github.com/stretchr/testify/require"
	"testing"
	"user-context/domain/package"
	"user-context/domain/permission"
	"user-context/domain/space"
)

func randomAccountAggregate(rootID string, options ...RootOptions) *AggregateRoot {
	return NewAggregateRoot(rootID, options...)
}

func TestSetAggregateRootID(t *testing.T) {
	aggregate := randomAccountAggregate("",
		WithOrganizationOptions([]space.ValueObject{}, []space.ValueObject{}),
		WithApplicationOptions("", "", "", ""),
		WithCurrentSpaceOptions("", "", "", "",
			map[string]string{}, 0, 0, packages.ValueObject{}, permission.ValueObject{}))
	id := "aggregate_root_id"
	aggregate.SetAggregateRootID(id)
	require.Equal(t, aggregate.RootID, id)
}

func TestGetAggregateRootID(t *testing.T) {
	id := "aggregate_root_id"
	aggregate := randomAccountAggregate(id)
	require.Equal(t, aggregate.RootID, id)
}

func TestSetAccountID(t *testing.T) {
	id := "aggregate_root_id"
	aggregate := randomAccountAggregate("", WithAccountOptions("","","","",""))
	aggregate.SetAccountID(id)
	require.Equal(t, aggregate.Account.Entity.ID, id)
}

func TestGetAccountID(t *testing.T) {
	id := "aggregate_root_id"
	aggregate := randomAccountAggregate(id)
	require.Equal(t, aggregate.GetAccountID(), id)
}

